package zad1;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;

/**
 * Created by ilya_ on 06.04.2017.
 */
public class GUI extends JFrame implements Runnable {
    private JButton sendButton;
    private JTextArea messageTextArea;
    private JTextArea mainTextArea;
    private JScrollPane mainScrPane;
    private JPanel sendPane;
    private JScrollPane messageScrPane;
    private JPanel mainJPanel;

    Client client;

    public GUI() {
        super("Local Chat");
    }


    public GUI(Client client) {
        super("Local Chat - Your nickname: " + client.nickname);

        setContentPane(mainJPanel);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        SwingUtilities.getRootPane(sendButton).setDefaultButton(sendButton);
        this.client = client;
        mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                try {
                    client.writeToChannel(client.serverConChannel, "Good bye! I leave the chat!");
                } catch (Exception e1) {
                    System.exit(-1);
                }
                setVisible(false);
                client.enterNickName();
            }
        });

        mainTextArea.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void removeUpdate(DocumentEvent e) {
                mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());
            }

            @Override
            public void changedUpdate(DocumentEvent arg0) {
                mainTextArea.setCaretPosition(mainTextArea.getDocument().getLength());
            }
        });


        messageTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.isShiftDown() && (e.getKeyCode() == KeyEvent.VK_ENTER)) {
                    e.consume();
                    messageTextArea.append("\n");
                } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    e.consume();
                    sendButton.requestFocus();
                    sendButton.doClick();
                    messageTextArea.requestFocus();
                }
            }
        });

        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (messageTextArea.getText().isEmpty()) {
                    return;
                }
//                client.setMessage(messageTextArea.getText().trim());
                try {
                    client.writeToChannel(client.serverConChannel, messageTextArea.getText().trim());
                } catch (Exception e1) {
                    e1.printStackTrace();
                    mainTextArea.append("\nServer not found!");
                }
//                System.out.println("press button");
                messageTextArea.setText(null);
            }
        });


    }

    @Override
    public void run() {
        pack();
        setVisible(true);
        messageTextArea.requestFocus();
        setLocationRelativeTo(null);
    }


    public JButton getSendButton() {
        return sendButton;
    }

    public JTextArea getMessageTextArea() {
        return messageTextArea;
    }

    public JTextArea getMainTextArea() {
        return mainTextArea;
    }


    public JScrollPane getMainScrPane() {
        return mainScrPane;
    }


    public JPanel getSendPane() {
        return sendPane;
    }

    public JScrollPane getMessageScrPane() {
        return messageScrPane;
    }

    public JPanel getMainJPanel() {
        return mainJPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainJPanel = new JPanel();
        mainJPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainJPanel.setEnabled(true);
        mainJPanel.setFont(new Font("Roboto", Font.PLAIN, 16));
        messageScrPane = new JScrollPane();
        messageScrPane.setHorizontalScrollBarPolicy(31);
        mainJPanel.add(messageScrPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(212, 60), null, 0, false));
        messageTextArea = new JTextArea();
        messageTextArea.setFont(new Font("Roboto", Font.PLAIN, 18));
        messageTextArea.setLineWrap(true);
        messageTextArea.setWrapStyleWord(false);
        messageScrPane.setViewportView(messageTextArea);
        mainScrPane = new JScrollPane();
        mainJPanel.add(mainScrPane, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(500, 250), null, 0, false));
        mainTextArea = new JTextArea();
        mainTextArea.setColumns(0);
        mainTextArea.setEditable(false);
        mainTextArea.setEnabled(true);
        mainTextArea.setFont(new Font("Roboto", Font.PLAIN, 18));
        mainTextArea.setLineWrap(true);
        mainTextArea.setWrapStyleWord(false);
        mainScrPane.setViewportView(mainTextArea);
        sendPane = new JPanel();
        sendPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainJPanel.add(sendPane, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        sendButton = new JButton();
        sendButton.setFont(new Font("Roboto", Font.PLAIN, 18));
        sendButton.setText("SEND");
        sendPane.add(sendButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(100, 60), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainJPanel;
    }
}
